#!/usr/bin/env python3

class Coord:
    def __init__(self, row, column):
        self.column = column
        self.row = row


class Range:
    def __init__(self, begin, end):
        self.begin = begin
        self.end = end

    def overlaps(self, other):
        if self.begin.column <= other.begin.column <= self.end.column:
            return True

        if self.begin.column <= other.end.column <= self.end.column:
            return True

        if other.begin.column <= self.begin.column <= other.end.column:
            return True

        return False


class PartNumber:
    def __init__(self, number, range):
        self.number = number
        self.range = range
        self.adjacent = False


if __name__ == "__main__":
    with open("input.txt") as input_file:
        lines = input_file.readlines()

    symbols = {"*": True, "&": True, "$": True, "-": True, "+": True, "%": True, "/": True, "#": True, "=": True, "@": True}

    part_numbers_by_row = []

    # Build up a list of part numbers
    for row, line in enumerate(lines):
        part_number_column = 0
        part_number = ""
        part_numbers = []

        for column, ch in enumerate(line):
            if "0" <= ch <= "9":
                if part_number == "":
                    part_number_column = column
                part_number += ch

            if (ch == "." or ch in symbols or column == len(line) - 1) and part_number != "":
                part_numbers.append(PartNumber(int(part_number), Range(Coord(row, part_number_column), Coord(row, column - 1))))
                part_number = ""

        part_numbers_by_row.append(part_numbers)

    for row, line in enumerate(lines):
        for column, ch in enumerate(line):
            if ch in symbols:
                top = Range(Coord(row-1, column-1), Coord(row-1, column+1))
                middle = Range(Coord(row, column-1), Coord(row, column+1))
                bottom = Range(Coord(row+1, column-1), Coord(row+1, column+1))

                if row - 1 >= 0:
                    for pn in part_numbers_by_row[row-1]:
                        if pn.range.overlaps(top):
                            pn.adjacent = True

                for pn in part_numbers_by_row[row]:
                    if pn.range.overlaps(middle):
                        pn.adjacent = True

                if row + 1 < len(lines):
                    for pn in part_numbers_by_row[row+1]:
                        if pn.range.overlaps(bottom):
                            pn.adjacent = True

    total = 0

    for row in part_numbers_by_row:
        for pn in row:
            if pn.adjacent:
                total += pn.number

    print("Solution (part 1): {}".format(total))
