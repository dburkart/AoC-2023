#!/usr/bin/env python3

import re

game_regex = re.compile("^Game ([0-9]+): (.*)")


class Round:
    def __repr__(self):
        return "Round(R: {}, G: {}, B: {})".format(self.Red, self.Green, self.Blue)

    def __init__(self, round):
        self.Red = self.Green = self.Blue = 0
        for e in round.split(","):
            if e == "":
                continue
            parts = e.strip().lower().split(" ")
            num = int(parts[0])
            if parts[1] == "red":
                self.Red = num
            elif parts[1] == "green":
                self.Green = num
            elif parts[1] == "blue":
                self.Blue = num


class Game:
    def __init__(self, line):
        self.Rounds = []

        m = game_regex.match(line.strip())
        self.ID = int(m.group(1))

        for round in m.group(2).split(";"):
            self.Rounds.append(Round(round))

    def valid(self):
        for round in self.Rounds:
            if round.Red > 12 or round.Green > 13 or round.Blue > 14:
                return False
        return True

    def minimum_config(self):
        minimum = Round("")

        for round in self.Rounds:
            if round.Red > minimum.Red:
                minimum.Red = round.Red
            if round.Green > minimum.Green:
                minimum.Green = round.Green
            if round.Blue > minimum.Blue:
                minimum.Blue = round.Blue

        return minimum.Red * minimum.Green * minimum.Blue


if __name__ == "__main__":
    with open("input.txt") as input_file:
        games = input_file.readlines()

    total = 0
    part2_total = 0

    for game in games:
        g = Game(game)
        if g.valid():
            total += g.ID
        part2_total += g.minimum_config()

    print("Solution (part 1): {}".format(total))
    print("Solution (part 2): {}".format(part2_total))