#!/usr/bin/env python3
import functools
import math
from typing import AnyStr


@functools.cache
def scan_tables():
    numbers = {
        "one": "1",
        "two": "2",
        "three": "3",
        "four": "4",
        "five": "5",
        "six": "6",
        "seven": "7",
        "eight": "8",
        "nine": "9",
    }

    table: dict[str, str] = {}
    table_reversed: dict[str, str] = {}

    # Build two dynamic scan tables, one from left-to-right, and the other from right-to-left
    for k, v in numbers.items():
        piece = ""
        piece_reversed = ""
        for ch in k:
            piece = piece + ch

            if piece == k:
                table[piece] = v
            else:
                table[piece] = "__next__"

        rk = "".join(reversed(k))
        for ch in rk:
            piece_reversed = piece_reversed + ch

            if piece_reversed == rk:
                table_reversed[piece_reversed] = v
            else:
                table_reversed[piece_reversed] = "__next__"

    return table, table_reversed

"""
Part 2

Since spelled out numbers can overlap (i.e. twone -> two, not one), we can't do a simple string replace.
Instead we can do lexical analysis to detect our tokens (one, two, three, etc.).
"""
def transform_to_numeric(coordinate: AnyStr, reverse: bool) -> AnyStr:
    result: str = ""
    substring: str = ""

    table, table_reversed = scan_tables()

    lookup_table = table
    if reverse:
        lookup_table = table_reversed

    for ch in coordinate:
        while substring + ch not in lookup_table:
            if substring == "":
                break
            result += substring[0]
            substring = substring[1:]

        if substring + ch in lookup_table:
            substring = substring + ch
            if lookup_table[substring] == "__next__":
                continue
            else:
                result += lookup_table[substring]
                substring = ""
                continue

        result += ch

    result += substring
    return result


"""
Part 1 algorithm
"""
def extract_calibration_value_part1(coord: AnyStr) -> int:
    value: int = 0

    # Find the first digit by going character-by-character from the beginning
    for c in coord:
        if 0x30 <= ord(c) <= 0x39:
            value = int(c) * 10
            break

    for c in reversed(coord):
        if 0x30 <= ord(c) <= 0x39:
            value += int(c)
            break

    return value


"""
Part 2 algorithm
"""
def extract_calibration_value_part2(coord: AnyStr) -> int:
    value: int = 0

    # Find the first digit by going character-by-character from the beginning
    for c in transform_to_numeric(coord, False):
        if 0x30 <= ord(c) <= 0x39:
            value = int(c) * 10
            break

    for c in transform_to_numeric("".join(reversed(coord)), True):
        if 0x30 <= ord(c) <= 0x39:
            value += int(c)
            break

    return value

if __name__ == "__main__":
    with open("input.txt") as input_file:
        coordinates = input_file.readlines()

    running_total: int = 0
    running_total_part2: int = 0

    for coordinate in coordinates:
        c = coordinate.rstrip()
        running_total += extract_calibration_value_part1(c)
        running_total_part2 += extract_calibration_value_part2(c)

    print("Summed calibration value (part 1): {}".format(running_total))
    print("Summed calibration value (part 2): {}".format(running_total_part2))
